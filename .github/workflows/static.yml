# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Update submodules
        run: |  
          git clone -b release/documentation --single-branch --depth 1 https://git:${{ secrets.SRC_TOKEN }}@github.com/veracity-engineering/WebAppTemplate.git docs/articles
          
          git clone -b gh-pages --single-branch --depth 1 --depth 1 https://github.com/veracity-engineering/WebAppTemplateDoc.git docs/_site
  
      - name: Use Node
        uses: actions/setup-node@v3
        with:
            node-version: '18.x'
      
      - name: Check files
        run: |
           ls
           cd docs/articles/website
           ls
            
      - name: Build artifacts
        run: |
           ls
           cd docs/articles/website
           echo "::debug::Install npm packages"
           npm install --force
           npm run build  
      - name: Moving files
        run: |
          cp -r docs/articles/website docs/_site/
          cd docs/_site
          ls
         
#       - name: Publish pages
#         env:
#           SRC_FOLDER_PATH: 'docs/articles/website/docs'
#           TARGET_BRANCH: 'gh-pages'
#         run: |
#           ls
#           files=$(find $SRC_FOLDER_PATH -type f) # get the file list
#           git config --global user.name 'GitHub Action'
#           git config --global user.email 'action@github.com'
#           git fetch                         # fetch branches
#           git checkout $TARGET_BRANCH       # checkout to your branch
#           git checkout ${GITHUB_REF##*/} -- $files # copy files from the source branch
#           git add -A
#           git diff-index --quiet HEAD ||  git commit -am "deploy files"  # commit to the repository (ignore if no modification)
#           git push origin $TARGET_BRANCH # push to remote branch
          
          
          
          
#       - name: Publish gh-pages
#         run: |
#           #cd docs/articles/website
#           #ls
#           cd docs/_site
          
#           echo "::debug::Add new files to git"
#           git fetch
#           git add .

#           echo "::debug::Commit changes to git"
#           git config user.email "actions-bot@users.noreply.github.com"
#           git config user.name "github actions bot"
#           git commit -m "Update docs" || echo "No change to commit"

#           echo "::debug::Push commit to remote"
#           git push https://git:${{ secrets.SRC_TOKEN }}@github.com/veracity-engineering/WebAppTemplateDoc.git HEAD:gh-pages
